@page "/reader"

@using MQTTnet;
@using MQTTnet.Client.Options;
@using MQTTnet.Client;
@using System.Text;
@using CommonLib.Models;
@using System.Text.Json;

<h1>Inventory Page</h1>

<form class="form-inline">
    <div class="form-group mb-2">
        <label for="staticAddress" class="sr-only">IP Address</label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <label for="inputAddress" class="sr-only"></label>
        <input type="text" value="@_address" @oninput="(EventArgs) => { SetValue(EventArgs.Value.ToString()); }" class="form-control" id="inputAddress" placeholder="IP Address">
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <button type="button" id="connectButton" @onclick="Connect" class="btn btn-primary mb-2">Connect</button>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <button type="button" id="disconnectButton" @onclick="Disconnect" class="btn btn-danger mb-2">Disconnect</button>
    </div>
</form>

<br />

<ul class="list-group">
    <li class="list-group-item d-flex justify-content-between align-items-center">
        Total Reads
        <span class="badge badge-primary badge-pill">@_totalReads.ToString()</span>
    </li>
    <li class="list-group-item d-flex justify-content-between align-items-center">
        Total Epc
        <span class="badge badge-primary badge-pill">@_totalEpcs.ToString()</span>
    </li>
</ul>

<br />

<button type="button" id="clearButton" @onclick="Clear" class="btn btn-warning">Clear EPC's</button>

<br />
<br />

<h3>List of EPC's</h3>

<br />

@if (_tags == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>EPC</th>
                <th>RSSI (db)</th>
                <th>Antenna (ID)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in _tags)
            {
                <tr>
                    <td>@tag.Key</td>
                    <td>@tag.Value.Item1</td>
                    <td>@tag.Value.Item2</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private string _address;
    private int _totalReads;
    private int _totalEpcs;
    private Dictionary<string, Tuple<double, int>> _tags;

    private static MqttFactory _mqttFactory;
    private static IMqttClient _mqttClient;
    private static IMqttClientOptions _mqttOptions;

    protected override async Task OnInitializedAsync()
    {
        //Load data
        _tags = new Dictionary<string, Tuple<double, int>>();
        _totalReads = _totalEpcs = 0;

        _mqttFactory = new MqttFactory();
        _mqttClient = _mqttFactory.CreateMqttClient();

        _mqttClient.UseConnectedHandler(async e =>
        {
            Console.WriteLine("### CONNECTED WITH SERVER ###");

            // Subscribe to a topic
            await _mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic("MyTopic").Build());

            Console.WriteLine("### SUBSCRIBED ###");
        });

        _mqttClient.UseApplicationMessageReceivedHandler(async e =>
        {
            var payload = Encoding.UTF8.GetString(e.ApplicationMessage.Payload);

            Console.WriteLine($"Message Received Payload = {payload} \t Topic = {e.ApplicationMessage.Topic}");
            Console.WriteLine();

            //var readOnlySpan = new ReadOnlySpan<byte>(e.ApplicationMessage.Payload);
            var tag = JsonSerializer.Deserialize<TagModel>(payload);

            await ProcessEpc(tag);

        });
    }


    private async Task ProcessEpc(TagModel tag)
    {
        if (!_tags.ContainsKey(tag.Epc))
        {
            _tags.Add(tag.Epc, new Tuple<double, int>(tag.Rssi, tag.Antenna));
            _totalEpcs++;
        }
        else
        {
            _tags[tag.Epc] = new Tuple<double, int>(tag.Rssi, tag.Antenna);
        }
        _totalReads++;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

    }

    private async Task Clear()
    {
        _totalEpcs = _totalReads = 0;
        _tags.Clear();

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }


    private async Task Connect()
    {
        //_rfidReader.Address = _address;
        //await _rfidReader.Connect();
        if (string.IsNullOrEmpty(_address))
        {
            _address = "192.168.220.177";
        }

        _mqttOptions = new MqttClientOptionsBuilder()
                .WithWebSocketServer(string.Format("{0}:8083/mqtt", _address))
                .Build();

        if (!_mqttClient.IsConnected)
        {
            await _mqttClient.ConnectAsync(_mqttOptions);
        }

    }

    private async Task Disconnect()
    {
        //await _rfidReader.Disconnect();

        if (_mqttClient.IsConnected)
        {
            await _mqttClient.DisconnectAsync();
        }
    }

    private void SetValue(string value)
    {
        _address = value;
    }

}
